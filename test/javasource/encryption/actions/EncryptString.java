// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package encryption.actions;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import org.apache.commons.codec.binary.Base64;

public class EncryptString extends CustomJavaAction<String>
{
	private String value;
	private String key;
	private String prefix;

	public EncryptString(IContext context, String value, String key, String prefix)
	{
		super(context);
		this.value = value;
		this.key = key;
		this.prefix = prefix;
	}

	@Override
	public String executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (value == null) 
			return null;
		if (prefix == null || prefix.isEmpty())
			throw new MendixRuntimeException("Prefix should not be empty");
		if (key == null || key.isEmpty())
			throw new MendixRuntimeException("Key should not be empty");
		if (key.length() != 16)
			throw new MendixRuntimeException("Key length should be 16");
		Cipher c = Cipher.getInstance("AES/CBC/PKCS5PADDING");
		SecretKeySpec k = new SecretKeySpec(key.getBytes(), "AES");
		c.init(Cipher.ENCRYPT_MODE, k);

		byte[] encryptedData = c.doFinal(value.getBytes());
		byte[] iv = c.getIV();

		return new StringBuilder(prefix +
				new String(Base64.encodeBase64(iv))).append(";").append(
				new String(Base64.encodeBase64(encryptedData))).toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "EncryptString";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
