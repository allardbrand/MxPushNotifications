// This file was generated by Mendix Modeler 6.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the PushNotifications module

	public static void aCo_Device(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			Core.execute(context, "PushNotifications.ACo_Device", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void aCr_Message(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.ACr_Message", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean afterStartup_PushNotifications(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "PushNotifications.AfterStartup_PushNotifications", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void background_SendAppleMessages(IContext context, java.util.List<pushnotifications.proxies.AppleMessage> _appleMessageList)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			java.util.ArrayList<IMendixObject> listparam_appleMessageList = null;
			if (_appleMessageList != null)
			{
				listparam_appleMessageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.AppleMessage obj : _appleMessageList)
					listparam_appleMessageList.add(obj.getMendixObject());
			}
			params.put("AppleMessageList", listparam_appleMessageList);
			Core.execute(context, "PushNotifications.Background_SendAppleMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void background_SendGoogleMessages(IContext context, java.util.List<pushnotifications.proxies.GoogleMessage> _googleMessageList)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			java.util.ArrayList<IMendixObject> listparam_googleMessageList = null;
			if (_googleMessageList != null)
			{
				listparam_googleMessageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.GoogleMessage obj : _googleMessageList)
					listparam_googleMessageList.add(obj.getMendixObject());
			}
			params.put("GoogleMessageList", listparam_googleMessageList);
			Core.execute(context, "PushNotifications.Background_SendGoogleMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void background_SendWindowsMessage(IContext context, java.util.List<pushnotifications.proxies.WindowsMessage> _windowsMessageList)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			java.util.ArrayList<IMendixObject> listparam_windowsMessageList = null;
			if (_windowsMessageList != null)
			{
				listparam_windowsMessageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.WindowsMessage obj : _windowsMessageList)
					listparam_windowsMessageList.add(obj.getMendixObject());
			}
			params.put("WindowsMessageList", listparam_windowsMessageList);
			Core.execute(context, "PushNotifications.Background_SendWindowsMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void createAndQueueMessage(IContext context, pushnotifications.proxies.Device _device, String _messageText, String _title, Long _badge, String _launchImage, String _sound)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("MessageText", _messageText);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			Core.execute(context, "PushNotifications.CreateAndQueueMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void createAndSendMessage(IContext context, pushnotifications.proxies.Device _device, String _messageText, String _title, Long _badge, String _launchImage, String _sound)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("MessageText", _messageText);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			Core.execute(context, "PushNotifications.CreateAndSendMessage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.Message createMessage(IContext context, pushnotifications.proxies.Device _device, String _message, String _title, Long _badge, String _launchImage, String _sound, boolean _queued)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			params.put("Message", _message);
			params.put("Title", _title);
			params.put("Badge", _badge);
			params.put("LaunchImage", _launchImage);
			params.put("Sound", _sound);
			params.put("Queued", _queued);
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.CreateMessage", params);
			return result == null ? null : pushnotifications.proxies.Message.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.AppleMessage dS_CreateAppleMessage(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_CreateAppleMessage", params);
			return result == null ? null : pushnotifications.proxies.AppleMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.AppleMessage dS_CreateAppleMessageForDevice(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_CreateAppleMessageForDevice", params);
			return result == null ? null : pushnotifications.proxies.AppleMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.GoogleMessage dS_CreateGoogleMessage(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_CreateGoogleMessage", params);
			return result == null ? null : pushnotifications.proxies.GoogleMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.GoogleMessage dS_CreateGoogleMessageForDevice(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_CreateGoogleMessageForDevice", params);
			return result == null ? null : pushnotifications.proxies.GoogleMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.WindowsMessage dS_CreateWindowsMessage(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_CreateWindowsMessage", params);
			return result == null ? null : pushnotifications.proxies.WindowsMessage.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.Device dS_Device(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.DS_Device", params);
			return result == null ? null : pushnotifications.proxies.Device.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.APNSettings getAPNSettings(IContext context, pushnotifications.proxies.DTAPMode _dTAPMode)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("DTAPMode", _dTAPMode == null ? null : _dTAPMode.name());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.GetAPNSettings", params);
			return result == null ? null : pushnotifications.proxies.APNSettings.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.DTAPMode getDTAPMode(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			String result = (String)Core.execute(context, "PushNotifications.GetDTAPMode", params);
			if (result == null)
				return null;
			return pushnotifications.proxies.DTAPMode.valueOf(result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static pushnotifications.proxies.GCMSettings getGCMSettings(IContext context, pushnotifications.proxies.DTAPMode _dTAPMode)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("DTAPMode", _dTAPMode == null ? null : _dTAPMode.name());
			IMendixObject result = (IMendixObject)Core.execute(context, "PushNotifications.GetGCMSettings", params);
			return result == null ? null : pushnotifications.proxies.GCMSettings.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_CreateAppleAdministration(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "PushNotifications.IVK_CreateAppleAdministration", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_OpenMessageDetails(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_OpenMessageDetails", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_OpenSendMessageForm(IContext context, pushnotifications.proxies.Device _device)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Device", _device == null ? null : _device.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_OpenSendMessageForm", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_RestartAPN(IContext context, pushnotifications.proxies.APNSettings _aPNSettings)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_RestartAPN", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_RestartGCM(IContext context, pushnotifications.proxies.GCMSettings _gCMSettings)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("GCMSettings", _gCMSettings == null ? null : _gCMSettings.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_RestartGCM", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_SaveAPNSettings(IContext context, pushnotifications.proxies.APNSettings _aPNSettings)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("APNSettings", _aPNSettings == null ? null : _aPNSettings.getMendixObject());
			Core.execute(context, "PushNotifications.IVK_SaveAPNSettings", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sE_FeedbackService(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "PushNotifications.SE_FeedbackService", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sE_SendQueuedMessages(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "PushNotifications.SE_SendQueuedMessages", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sendMessageImmediately(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.SendMessageImmediately", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sendMessageQueued(IContext context, pushnotifications.proxies.Message _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message == null ? null : _message.getMendixObject());
			Core.execute(context, "PushNotifications.SendMessageQueued", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void sendMessagesImmediately(IContext context, java.util.List<pushnotifications.proxies.Message> _messageList)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			java.util.ArrayList<IMendixObject> listparam_messageList = null;
			if (_messageList != null)
			{
				listparam_messageList = new java.util.ArrayList<IMendixObject>();
				for (pushnotifications.proxies.Message obj : _messageList)
					listparam_messageList.add(obj.getMendixObject());
			}
			params.put("MessageList", listparam_messageList);
			Core.execute(context, "PushNotifications.SendMessagesImmediately", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}